;; Auto-generated. Do not edit!


(when (boundp 'optoforce_ros::OptoForceFeedback)
  (if (not (find-package "OPTOFORCE_ROS"))
    (make-package "OPTOFORCE_ROS"))
  (shadow 'OptoForceFeedback (find-package "OPTOFORCE_ROS")))
(unless (find-package "OPTOFORCE_ROS::OPTOFORCEFEEDBACK")
  (make-package "OPTOFORCE_ROS::OPTOFORCEFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude OptoForceFeedback.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass optoforce_ros::OptoForceFeedback
  :super ros::object
  :slots (_wrench_lst ))

(defmethod optoforce_ros::OptoForceFeedback
  (:init
   (&key
    ((:wrench_lst __wrench_lst) ())
    )
   (send-super :init)
   (setq _wrench_lst __wrench_lst)
   self)
  (:wrench_lst
   (&rest __wrench_lst)
   (if (keywordp (car __wrench_lst))
       (send* _wrench_lst __wrench_lst)
     (progn
       (if __wrench_lst (setq _wrench_lst (car __wrench_lst)))
       _wrench_lst)))
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/WrenchStamped[] _wrench_lst
    (apply #'+ (send-all _wrench_lst :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/WrenchStamped[] _wrench_lst
     (write-long (length _wrench_lst) s)
     (dolist (elem _wrench_lst)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/WrenchStamped[] _wrench_lst
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _wrench_lst (let (r) (dotimes (i n) (push (instance geometry_msgs::WrenchStamped :init) r)) r))
     (dolist (elem- _wrench_lst)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get optoforce_ros::OptoForceFeedback :md5sum-) "33beeb9f57ea2f43c06c3f58af305729")
(setf (get optoforce_ros::OptoForceFeedback :datatype-) "optoforce_ros/OptoForceFeedback")
(setf (get optoforce_ros::OptoForceFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback
geometry_msgs/WrenchStamped[] wrench_lst


================================================================================
MSG: geometry_msgs/WrenchStamped
# A wrench with reference coordinate frame and timestamp
Header header
Wrench wrench

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :optoforce_ros/OptoForceFeedback "33beeb9f57ea2f43c06c3f58af305729")


