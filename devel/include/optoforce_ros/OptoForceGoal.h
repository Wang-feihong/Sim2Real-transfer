// Generated by gencpp from file optoforce_ros/OptoForceGoal.msg
// DO NOT EDIT!


#ifndef OPTOFORCE_ROS_MESSAGE_OPTOFORCEGOAL_H
#define OPTOFORCE_ROS_MESSAGE_OPTOFORCEGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace optoforce_ros
{
template <class ContainerAllocator>
struct OptoForceGoal_
{
  typedef OptoForceGoal_<ContainerAllocator> Type;

  OptoForceGoal_()
    : store(false)
    , acq_duration(0.0)
    , publish_freq(0)  {
    }
  OptoForceGoal_(const ContainerAllocator& _alloc)
    : store(false)
    , acq_duration(0.0)
    , publish_freq(0)  {
  (void)_alloc;
    }



   typedef uint8_t _store_type;
  _store_type store;

   typedef double _acq_duration_type;
  _acq_duration_type acq_duration;

   typedef int32_t _publish_freq_type;
  _publish_freq_type publish_freq;





  typedef boost::shared_ptr< ::optoforce_ros::OptoForceGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::optoforce_ros::OptoForceGoal_<ContainerAllocator> const> ConstPtr;

}; // struct OptoForceGoal_

typedef ::optoforce_ros::OptoForceGoal_<std::allocator<void> > OptoForceGoal;

typedef boost::shared_ptr< ::optoforce_ros::OptoForceGoal > OptoForceGoalPtr;
typedef boost::shared_ptr< ::optoforce_ros::OptoForceGoal const> OptoForceGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::optoforce_ros::OptoForceGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::optoforce_ros::OptoForceGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::optoforce_ros::OptoForceGoal_<ContainerAllocator1> & lhs, const ::optoforce_ros::OptoForceGoal_<ContainerAllocator2> & rhs)
{
  return lhs.store == rhs.store &&
    lhs.acq_duration == rhs.acq_duration &&
    lhs.publish_freq == rhs.publish_freq;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::optoforce_ros::OptoForceGoal_<ContainerAllocator1> & lhs, const ::optoforce_ros::OptoForceGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace optoforce_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::optoforce_ros::OptoForceGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optoforce_ros::OptoForceGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::optoforce_ros::OptoForceGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::optoforce_ros::OptoForceGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optoforce_ros::OptoForceGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optoforce_ros::OptoForceGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::optoforce_ros::OptoForceGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69e819ebc559709f7bffac7bbf22dba5";
  }

  static const char* value(const ::optoforce_ros::OptoForceGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69e819ebc559709fULL;
  static const uint64_t static_value2 = 0x7bffac7bbf22dba5ULL;
};

template<class ContainerAllocator>
struct DataType< ::optoforce_ros::OptoForceGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "optoforce_ros/OptoForceGoal";
  }

  static const char* value(const ::optoforce_ros::OptoForceGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::optoforce_ros::OptoForceGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"bool store\n"
"float64 acq_duration\n"
"int32 publish_freq\n"
;
  }

  static const char* value(const ::optoforce_ros::OptoForceGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::optoforce_ros::OptoForceGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.store);
      stream.next(m.acq_duration);
      stream.next(m.publish_freq);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OptoForceGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::optoforce_ros::OptoForceGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::optoforce_ros::OptoForceGoal_<ContainerAllocator>& v)
  {
    s << indent << "store: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.store);
    s << indent << "acq_duration: ";
    Printer<double>::stream(s, indent + "  ", v.acq_duration);
    s << indent << "publish_freq: ";
    Printer<int32_t>::stream(s, indent + "  ", v.publish_freq);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPTOFORCE_ROS_MESSAGE_OPTOFORCEGOAL_H
